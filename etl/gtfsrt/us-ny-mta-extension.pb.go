// Copyright 2012 Metropolitan Transportation Authority
//
// Protocol definition NYCT-specific extensions to GTFS-realtime.
//
// As originally posted at:
//
//   https://groups.google.com/d/msg/gtfs-realtime/KWJhkXH0kBg/8rlRMxiL-ysJ

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: gtfsrt/us-ny-mta-extension.proto

package gtfsrt

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The direction the train is moving.
type NyctTripDescriptor_Direction int32

const (
	NyctTripDescriptor_NORTH NyctTripDescriptor_Direction = 1
	NyctTripDescriptor_EAST  NyctTripDescriptor_Direction = 2
	NyctTripDescriptor_SOUTH NyctTripDescriptor_Direction = 3
	NyctTripDescriptor_WEST  NyctTripDescriptor_Direction = 4
)

// Enum value maps for NyctTripDescriptor_Direction.
var (
	NyctTripDescriptor_Direction_name = map[int32]string{
		1: "NORTH",
		2: "EAST",
		3: "SOUTH",
		4: "WEST",
	}
	NyctTripDescriptor_Direction_value = map[string]int32{
		"NORTH": 1,
		"EAST":  2,
		"SOUTH": 3,
		"WEST":  4,
	}
)

func (x NyctTripDescriptor_Direction) Enum() *NyctTripDescriptor_Direction {
	p := new(NyctTripDescriptor_Direction)
	*p = x
	return p
}

func (x NyctTripDescriptor_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NyctTripDescriptor_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_gtfsrt_us_ny_mta_extension_proto_enumTypes[0].Descriptor()
}

func (NyctTripDescriptor_Direction) Type() protoreflect.EnumType {
	return &file_gtfsrt_us_ny_mta_extension_proto_enumTypes[0]
}

func (x NyctTripDescriptor_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NyctTripDescriptor_Direction) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NyctTripDescriptor_Direction(num)
	return nil
}

// Deprecated: Use NyctTripDescriptor_Direction.Descriptor instead.
func (NyctTripDescriptor_Direction) EnumDescriptor() ([]byte, []int) {
	return file_gtfsrt_us_ny_mta_extension_proto_rawDescGZIP(), []int{2, 0}
}

type TripReplacementPeriod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The replacement period is for this route
	RouteId *string `protobuf:"bytes,1,opt,name=route_id,json=routeId" json:"route_id,omitempty"`
	// The start time is omitted, the end time is currently now + 30 minutes for
	// all routes of the A division
	ReplacementPeriod *TimeRange `protobuf:"bytes,2,opt,name=replacement_period,json=replacementPeriod" json:"replacement_period,omitempty"`
}

func (x *TripReplacementPeriod) Reset() {
	*x = TripReplacementPeriod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfsrt_us_ny_mta_extension_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TripReplacementPeriod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TripReplacementPeriod) ProtoMessage() {}

func (x *TripReplacementPeriod) ProtoReflect() protoreflect.Message {
	mi := &file_gtfsrt_us_ny_mta_extension_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TripReplacementPeriod.ProtoReflect.Descriptor instead.
func (*TripReplacementPeriod) Descriptor() ([]byte, []int) {
	return file_gtfsrt_us_ny_mta_extension_proto_rawDescGZIP(), []int{0}
}

func (x *TripReplacementPeriod) GetRouteId() string {
	if x != nil && x.RouteId != nil {
		return *x.RouteId
	}
	return ""
}

func (x *TripReplacementPeriod) GetReplacementPeriod() *TimeRange {
	if x != nil {
		return x.ReplacementPeriod
	}
	return nil
}

// NYCT Subway extensions for the feed header
type NyctFeedHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of the NYCT Subway extensions
	// The current version is 1.0
	NyctSubwayVersion *string `protobuf:"bytes,1,req,name=nyct_subway_version,json=nyctSubwayVersion" json:"nyct_subway_version,omitempty"`
	// For the NYCT Subway, the GTFS-realtime feed replaces any scheduled
	// trip within the trip_replacement_period.
	// This feed is a full dataset, it contains all trips starting
	// in the trip_replacement_period. If a trip from the static GTFS is not
	// found in the GTFS-realtime feed, it should be considered as cancelled.
	// The replacement period can be different for each route, so here is
	// a list of the routes where the trips in the feed replace all
	// scheduled trips within the replacement period.
	TripReplacementPeriod []*TripReplacementPeriod `protobuf:"bytes,2,rep,name=trip_replacement_period,json=tripReplacementPeriod" json:"trip_replacement_period,omitempty"`
}

func (x *NyctFeedHeader) Reset() {
	*x = NyctFeedHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfsrt_us_ny_mta_extension_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NyctFeedHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NyctFeedHeader) ProtoMessage() {}

func (x *NyctFeedHeader) ProtoReflect() protoreflect.Message {
	mi := &file_gtfsrt_us_ny_mta_extension_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NyctFeedHeader.ProtoReflect.Descriptor instead.
func (*NyctFeedHeader) Descriptor() ([]byte, []int) {
	return file_gtfsrt_us_ny_mta_extension_proto_rawDescGZIP(), []int{1}
}

func (x *NyctFeedHeader) GetNyctSubwayVersion() string {
	if x != nil && x.NyctSubwayVersion != nil {
		return *x.NyctSubwayVersion
	}
	return ""
}

func (x *NyctFeedHeader) GetTripReplacementPeriod() []*TripReplacementPeriod {
	if x != nil {
		return x.TripReplacementPeriod
	}
	return nil
}

// NYCT Subway extensions for the trip descriptor
type NyctTripDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nyct_train_id is meant for internal use only. It provides an
	// easy way to associated GTFS-realtime trip identifiers with NYCT rail
	// operations identifier
	//
	// The ATS office system assigns unique train identification (Train ID) to
	// each train operating within or ready to enter the mainline of the
	// monitored territory. An example of this is 06 0123+ PEL/BBR and is decoded
	// as follows:
	//
	// The first character represents the trip type designator. 0 identifies a
	// scheduled revenue trip. Other revenue trip values that are a result of a
	// change to the base schedule include; [= reroute], [/ skip stop], [$ turn
	// train] also known as shortly lined service.
	//
	// The second character 6 represents the trip line i.e. number 6 train The
	// third set of characters identify the decoded origin time. The last
	// character may be blank "on the whole minute" or + "30 seconds"
	//
	// Note: Origin times will not change when there is a trip type change.  This
	// is followed by a three character "Origin Location" / "Destination
	// Location"
	TrainId *string `protobuf:"bytes,1,opt,name=train_id,json=trainId" json:"train_id,omitempty"`
	// This trip has been assigned to a physical train. If true, this trip is
	// already underway or most likely will depart shortly.
	//
	// Train Assignment is a function of the Automatic Train Supervision (ATS)
	// office system used by NYCT Rail Operations to monitor and track train
	// movements. ATS provides the ability to "assign" the nyct_train_id
	// attribute when a physical train is at its origin terminal. These assigned
	// trips have the is_assigned field set in the TripDescriptor.
	//
	// When a train is at a terminal but has not been given a work program it is
	// declared unassigned and is tagged as such. Unassigned trains can be moved
	// to a storage location or assigned a nyct_train_id when a determination for
	// service is made.
	IsAssigned *bool `protobuf:"varint,2,opt,name=is_assigned,json=isAssigned" json:"is_assigned,omitempty"`
	// Uptown and Bronx-bound trains are moving NORTH.
	// Times Square Shuttle to Grand Central is also northbound.
	//
	// Downtown and Brooklyn-bound trains are moving SOUTH.
	// Times Square Shuttle to Times Square is also southbound.
	//
	// EAST and WEST are not used currently.
	Direction *NyctTripDescriptor_Direction `protobuf:"varint,3,opt,name=direction,enum=transit_realtime.NyctTripDescriptor_Direction" json:"direction,omitempty"`
}

func (x *NyctTripDescriptor) Reset() {
	*x = NyctTripDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfsrt_us_ny_mta_extension_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NyctTripDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NyctTripDescriptor) ProtoMessage() {}

func (x *NyctTripDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_gtfsrt_us_ny_mta_extension_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NyctTripDescriptor.ProtoReflect.Descriptor instead.
func (*NyctTripDescriptor) Descriptor() ([]byte, []int) {
	return file_gtfsrt_us_ny_mta_extension_proto_rawDescGZIP(), []int{2}
}

func (x *NyctTripDescriptor) GetTrainId() string {
	if x != nil && x.TrainId != nil {
		return *x.TrainId
	}
	return ""
}

func (x *NyctTripDescriptor) GetIsAssigned() bool {
	if x != nil && x.IsAssigned != nil {
		return *x.IsAssigned
	}
	return false
}

func (x *NyctTripDescriptor) GetDirection() NyctTripDescriptor_Direction {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return NyctTripDescriptor_NORTH
}

// NYCT Subway extensions for the stop time update
type NyctStopTimeUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides the planned station arrival track. The following is the Manhattan
	// track configurations:
	// 1: southbound local
	// 2: southbound express
	// 3: northbound express
	// 4: northbound local
	//
	// In the Bronx (except Dyre Ave line)
	// M: bi-directional express (in the AM express to Manhattan, in the PM
	// express away).
	//
	// The Dyre Ave line is configured:
	// 1: southbound
	// 2: northbound
	// 3: bi-directional
	ScheduledTrack *string `protobuf:"bytes,1,opt,name=scheduled_track,json=scheduledTrack" json:"scheduled_track,omitempty"`
	// This is the actual track that the train is operating on and can be used to
	// determine if a train is operating according to its current schedule
	// (plan).
	//
	// The actual track is known only shortly before the train reaches a station,
	// typically not before it leaves the previous station. Therefore, the NYCT
	// feed sets this field only for the first station of the remaining trip.
	//
	// Different actual and scheduled track is the result of manually rerouting a
	// train off it scheduled path.  When this occurs, prediction data may become
	// unreliable since the train is no longer operating in accordance to its
	// schedule.  The rules engine for the 'countdown' clocks will remove this
	// train from all schedule stations.
	ActualTrack *string `protobuf:"bytes,2,opt,name=actual_track,json=actualTrack" json:"actual_track,omitempty"`
}

func (x *NyctStopTimeUpdate) Reset() {
	*x = NyctStopTimeUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gtfsrt_us_ny_mta_extension_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NyctStopTimeUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NyctStopTimeUpdate) ProtoMessage() {}

func (x *NyctStopTimeUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_gtfsrt_us_ny_mta_extension_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NyctStopTimeUpdate.ProtoReflect.Descriptor instead.
func (*NyctStopTimeUpdate) Descriptor() ([]byte, []int) {
	return file_gtfsrt_us_ny_mta_extension_proto_rawDescGZIP(), []int{3}
}

func (x *NyctStopTimeUpdate) GetScheduledTrack() string {
	if x != nil && x.ScheduledTrack != nil {
		return *x.ScheduledTrack
	}
	return ""
}

func (x *NyctStopTimeUpdate) GetActualTrack() string {
	if x != nil && x.ActualTrack != nil {
		return *x.ActualTrack
	}
	return ""
}

var file_gtfsrt_us_ny_mta_extension_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*FeedHeader)(nil),
		ExtensionType: (*NyctFeedHeader)(nil),
		Field:         1001,
		Name:          "transit_realtime.nyct_feed_header",
		Tag:           "bytes,1001,opt,name=nyct_feed_header",
		Filename:      "gtfsrt/us-ny-mta-extension.proto",
	},
	{
		ExtendedType:  (*TripDescriptor)(nil),
		ExtensionType: (*NyctTripDescriptor)(nil),
		Field:         1001,
		Name:          "transit_realtime.nyct_trip_descriptor",
		Tag:           "bytes,1001,opt,name=nyct_trip_descriptor",
		Filename:      "gtfsrt/us-ny-mta-extension.proto",
	},
	{
		ExtendedType:  (*TripUpdate_StopTimeUpdate)(nil),
		ExtensionType: (*NyctStopTimeUpdate)(nil),
		Field:         1001,
		Name:          "transit_realtime.nyct_stop_time_update",
		Tag:           "bytes,1001,opt,name=nyct_stop_time_update",
		Filename:      "gtfsrt/us-ny-mta-extension.proto",
	},
}

// Extension fields to FeedHeader.
var (
	// optional transit_realtime.NyctFeedHeader nyct_feed_header = 1001;
	E_NyctFeedHeader = &file_gtfsrt_us_ny_mta_extension_proto_extTypes[0]
)

// Extension fields to TripDescriptor.
var (
	// optional transit_realtime.NyctTripDescriptor nyct_trip_descriptor = 1001;
	E_NyctTripDescriptor = &file_gtfsrt_us_ny_mta_extension_proto_extTypes[1]
)

// Extension fields to TripUpdate_StopTimeUpdate.
var (
	// optional transit_realtime.NyctStopTimeUpdate nyct_stop_time_update = 1001;
	E_NyctStopTimeUpdate = &file_gtfsrt_us_ny_mta_extension_proto_extTypes[2]
)

var File_gtfsrt_us_ny_mta_extension_proto protoreflect.FileDescriptor

var file_gtfsrt_us_ny_mta_extension_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x74, 0x66, 0x73, 0x72, 0x74, 0x2f, 0x75, 0x73, 0x2d, 0x6e, 0x79, 0x2d, 0x6d,
	0x74, 0x61, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x1a, 0x1a, 0x67, 0x74, 0x66, 0x73, 0x72, 0x74, 0x2f, 0x67, 0x74, 0x66,
	0x73, 0x2d, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7e, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74,
	0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x11, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x22, 0xa1, 0x01, 0x0a, 0x0e, 0x4e, 0x79, 0x63, 0x74, 0x46, 0x65, 0x65, 0x64, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x77,
	0x61, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x11, 0x6e, 0x79, 0x63, 0x74, 0x53, 0x75, 0x62, 0x77, 0x61, 0x79, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x5f, 0x0a, 0x17, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x15, 0x74,
	0x72, 0x69, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x12, 0x4e, 0x79, 0x63, 0x74, 0x54, 0x72, 0x69,
	0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4e, 0x79,
	0x63, 0x74, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4f, 0x52, 0x54, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4f, 0x55, 0x54, 0x48,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45, 0x53, 0x54, 0x10, 0x04, 0x22, 0x60, 0x0a, 0x12,
	0x4e, 0x79, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x3a, 0x69,
	0x0a, 0x10, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4e, 0x79, 0x63, 0x74, 0x46,
	0x65, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0e, 0x6e, 0x79, 0x63, 0x74, 0x46,
	0x65, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x3a, 0x79, 0x0a, 0x14, 0x6e, 0x79, 0x63,
	0x74, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4e, 0x79,
	0x63, 0x74, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x52, 0x12, 0x6e, 0x79, 0x63, 0x74, 0x54, 0x72, 0x69, 0x70, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x3a, 0x85, 0x01, 0x0a, 0x15, 0x6e, 0x79, 0x63, 0x74, 0x5f, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x54, 0x72, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x4e, 0x79, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x12, 0x6e, 0x79, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x55, 0x0a, 0x1b,
	0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x2e, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x66, 0x65,
	0x6e, 0x6e, 0x65, 0x6c, 0x6c, 0x2f, 0x73, 0x75, 0x62, 0x77, 0x61, 0x79, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x6e, 0x79, 0x63, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x74, 0x66,
	0x73, 0x72, 0x74,
}

var (
	file_gtfsrt_us_ny_mta_extension_proto_rawDescOnce sync.Once
	file_gtfsrt_us_ny_mta_extension_proto_rawDescData = file_gtfsrt_us_ny_mta_extension_proto_rawDesc
)

func file_gtfsrt_us_ny_mta_extension_proto_rawDescGZIP() []byte {
	file_gtfsrt_us_ny_mta_extension_proto_rawDescOnce.Do(func() {
		file_gtfsrt_us_ny_mta_extension_proto_rawDescData = protoimpl.X.CompressGZIP(file_gtfsrt_us_ny_mta_extension_proto_rawDescData)
	})
	return file_gtfsrt_us_ny_mta_extension_proto_rawDescData
}

var file_gtfsrt_us_ny_mta_extension_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gtfsrt_us_ny_mta_extension_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gtfsrt_us_ny_mta_extension_proto_goTypes = []interface{}{
	(NyctTripDescriptor_Direction)(0), // 0: transit_realtime.NyctTripDescriptor.Direction
	(*TripReplacementPeriod)(nil),     // 1: transit_realtime.TripReplacementPeriod
	(*NyctFeedHeader)(nil),            // 2: transit_realtime.NyctFeedHeader
	(*NyctTripDescriptor)(nil),        // 3: transit_realtime.NyctTripDescriptor
	(*NyctStopTimeUpdate)(nil),        // 4: transit_realtime.NyctStopTimeUpdate
	(*TimeRange)(nil),                 // 5: transit_realtime.TimeRange
	(*FeedHeader)(nil),                // 6: transit_realtime.FeedHeader
	(*TripDescriptor)(nil),            // 7: transit_realtime.TripDescriptor
	(*TripUpdate_StopTimeUpdate)(nil), // 8: transit_realtime.TripUpdate.StopTimeUpdate
}
var file_gtfsrt_us_ny_mta_extension_proto_depIdxs = []int32{
	5, // 0: transit_realtime.TripReplacementPeriod.replacement_period:type_name -> transit_realtime.TimeRange
	1, // 1: transit_realtime.NyctFeedHeader.trip_replacement_period:type_name -> transit_realtime.TripReplacementPeriod
	0, // 2: transit_realtime.NyctTripDescriptor.direction:type_name -> transit_realtime.NyctTripDescriptor.Direction
	6, // 3: transit_realtime.nyct_feed_header:extendee -> transit_realtime.FeedHeader
	7, // 4: transit_realtime.nyct_trip_descriptor:extendee -> transit_realtime.TripDescriptor
	8, // 5: transit_realtime.nyct_stop_time_update:extendee -> transit_realtime.TripUpdate.StopTimeUpdate
	2, // 6: transit_realtime.nyct_feed_header:type_name -> transit_realtime.NyctFeedHeader
	3, // 7: transit_realtime.nyct_trip_descriptor:type_name -> transit_realtime.NyctTripDescriptor
	4, // 8: transit_realtime.nyct_stop_time_update:type_name -> transit_realtime.NyctStopTimeUpdate
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	6, // [6:9] is the sub-list for extension type_name
	3, // [3:6] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_gtfsrt_us_ny_mta_extension_proto_init() }
func file_gtfsrt_us_ny_mta_extension_proto_init() {
	if File_gtfsrt_us_ny_mta_extension_proto != nil {
		return
	}
	file_gtfsrt_gtfs_realtime_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gtfsrt_us_ny_mta_extension_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TripReplacementPeriod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfsrt_us_ny_mta_extension_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NyctFeedHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfsrt_us_ny_mta_extension_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NyctTripDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gtfsrt_us_ny_mta_extension_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NyctStopTimeUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gtfsrt_us_ny_mta_extension_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_gtfsrt_us_ny_mta_extension_proto_goTypes,
		DependencyIndexes: file_gtfsrt_us_ny_mta_extension_proto_depIdxs,
		EnumInfos:         file_gtfsrt_us_ny_mta_extension_proto_enumTypes,
		MessageInfos:      file_gtfsrt_us_ny_mta_extension_proto_msgTypes,
		ExtensionInfos:    file_gtfsrt_us_ny_mta_extension_proto_extTypes,
	}.Build()
	File_gtfsrt_us_ny_mta_extension_proto = out.File
	file_gtfsrt_us_ny_mta_extension_proto_rawDesc = nil
	file_gtfsrt_us_ny_mta_extension_proto_goTypes = nil
	file_gtfsrt_us_ny_mta_extension_proto_depIdxs = nil
}
